name: CI/CD Pipeline

on:
  push:
    branches: [ aws-deploy ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  build:
    name: üîß Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate image tag
      run: |
        IMAGE_TAG=$(date +%s)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo $IMAGE_TAG > image_tag.txt

    - name: Build Docker image
      run: |
        IMAGE_NAME=${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker build -t $IMAGE_NAME .

    - name: Save Docker image as tar
      run: |
        IMAGE_NAME=${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker save -o image.tar $IMAGE_NAME

    - name: Upload artifacts (image and tag)
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          image.tar
          image_tag.txt

  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run tests
      run: echo "‚úÖ All tests passed."

  push:
    name: üöÄ Push to ECR
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Read image tag
      run: |
        IMAGE_TAG=$(cat image_tag.txt)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Load and push Docker image
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
        IMAGE_NAME=${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        IMAGE_URI=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$IMAGE_NAME

        docker load -i image.tar
        docker tag $IMAGE_NAME $IMAGE_URI
        docker push $IMAGE_URI

        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        echo $IMAGE_URI > image_uri.txt

    - name: Upload image URI
      uses: actions/upload-artifact@v4
      with:
        name: image-uri
        path: image_uri.txt

  deploy:
    name: ‚ò∏Ô∏è Deploy to EKS
    runs-on: ubuntu-latest
    needs: push

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download image URI
      uses: actions/download-artifact@v4
      with:
        name: image-uri

    - name: Set IMAGE_URI env
      run: |
        IMAGE_URI=$(cat image_uri.txt)
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        kubectl set image deployment/login-app-backend backend=$IMAGE_URI --record || echo "‚ö†Ô∏è Backend deployment not found."
        kubectl set image deployment/login-app-frontend frontend=$IMAGE_URI --record || echo "‚ö†Ô∏è Frontend deployment not found."
