name: CI/CD Pipeline for Login App

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      frontend_image: ${{ steps.frontend_tag.outputs.image }}
      backend_image: ${{ steps.backend_tag.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Frontend Image
        id: frontend_tag
        run: |
          docker build -t frontend:latest ./frontend
          echo "image=frontend:latest" >> $GITHUB_OUTPUT

      - name: Build Backend Image
        id: backend_tag
        run: |
          docker build -t backend:latest ./backend
          echo "image=backend:latest" >> $GITHUB_OUTPUT

  test:
    name: Run Container Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run Frontend
        run: docker run -d --rm -p 3000:3000 frontend:latest

      - name: Run Backend
        run: docker run -d --rm -p 5000:5000 backend:latest

      - name: Verify Containers
        run: docker ps

  push:
    name: Push to ECR
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag & Push Frontend
        run: |
          docker tag frontend:latest ${{ env.ECR_REGISTRY }}/frontend:latest
          docker push ${{ env.ECR_REGISTRY }}/frontend:latest

      - name: Tag & Push Backend
        run: |
          docker tag backend:latest ${{ env.ECR_REGISTRY }}/backend:latest
          docker push ${{ env.ECR_REGISTRY }}/backend:latest

  deploy:
    name: Deploy to EKS
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup `kubectl`
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Load Kubeconfig from Secret
        run: |
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 --decode > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: Set Kube Context
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }} \
            --kubeconfig kubeconfig

      - name: Deploy Manifests
        run: |
          kubectl apply -f k8s/
