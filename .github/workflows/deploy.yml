name: CI/CD Pipeline for Login App
on:
  push:
    branches:
      - main
      - aws-deploy
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      frontend_image: ${{ steps.frontend_tag.outputs.image }}
      backend_image: ${{ steps.backend_tag.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and Push Frontend Image
        id: frontend_tag
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest ${{ env.ECR_REGISTRY }}/frontend:latest
          docker push ${{ env.ECR_REGISTRY }}/frontend:latest
          echo "image=${{ env.ECR_REGISTRY }}/frontend:latest" >> $GITHUB_OUTPUT
          
      - name: Build and Push Backend Image
        id: backend_tag
        run: |
          docker build -t backend:latest ./backend
          docker tag backend:latest ${{ env.ECR_REGISTRY }}/backend:latest
          docker push ${{ env.ECR_REGISTRY }}/backend:latest
          echo "image=${{ env.ECR_REGISTRY }}/backend:latest" >> $GITHUB_OUTPUT

  test:
    name: Run Container Tests
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Pull and Run Frontend
        run: |
          docker pull ${{ needs.build-and-push.outputs.frontend_image }}
          docker run -d --name frontend-test -p 3000:3000 ${{ needs.build-and-push.outputs.frontend_image }}
          
      - name: Pull and Run Backend
        run: |
          docker pull ${{ needs.build-and-push.outputs.backend_image }}
          docker run -d --name backend-test -p 5000:5000 ${{ needs.build-and-push.outputs.backend_image }}
          
      - name: Verify Containers
        run: docker ps
        
      - name: Basic Health Check (optional)
        run: |
          sleep 10
          curl -f http://localhost:3000 || echo "Frontend health check failed"
          curl -f http://localhost:5000/health || echo "Backend health check failed"

  deploy:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
            
      - name: Deploy Manifests
        run: |
          # Update image tags in manifests (if using sed)
          sed -i "s|frontend:latest|${{ needs.build-and-push.outputs.frontend_image }}|g" k8s/*.yaml
          sed -i "s|backend:latest|${{ needs.build-and-push.outputs.backend_image }}|g" k8s/*.yaml
          kubectl apply -f k8s/
